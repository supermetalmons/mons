import * as MonsWeb from "mons-web";
import * as Board from "./board";

export function arrowForEvent(e: MonsWeb.EventModel): { arrow: string; isRight: boolean } {
  const from = e.loc1;
  const to = e.loc2;
  if (!from || !to) return { arrow: "‚û°Ô∏è", isRight: true };
  let di = to.i - from.i;
  let dj = to.j - from.j;
  if (Board.isFlipped) {
    di = -di;
    dj = -dj;
  }
  if (di === 0 && dj > 0) return { arrow: "‚û°Ô∏è", isRight: true };
  if (di === 0 && dj < 0) return { arrow: "‚¨ÖÔ∏è", isRight: false };
  if (dj === 0 && di > 0) return { arrow: "‚¨áÔ∏è", isRight: true };
  if (dj === 0 && di < 0) return { arrow: "‚¨ÜÔ∏è", isRight: true };
  if (di < 0 && dj > 0) return { arrow: "‚ÜóÔ∏è", isRight: true };
  if (di > 0 && dj > 0) return { arrow: "‚ÜòÔ∏è", isRight: true };
  if (di > 0 && dj < 0) return { arrow: "‚ÜôÔ∏è", isRight: false };
  if (di < 0 && dj < 0) return { arrow: "‚ÜñÔ∏è", isRight: false };
  return { arrow: "‚û°Ô∏è", isRight: true };
}

export function stringForSingleMoveEvents(events: MonsWeb.EventModel[]): string {
  let out = "";

  let actor = "";
  let action = "";
  let arrow = "";
  let target = "";

  let moveDirection: boolean | null = null;
  for (const ev of events) {
    let s = "";
    switch (ev.kind) {
      case MonsWeb.EventModelKind.MonMove:
        let tmpMonRender = ""; // TODO: can be mon carrying smth
        switch (ev.item?.mon?.kind) {
          case MonsWeb.MonKind.Demon:
            tmpMonRender = "üòà";
            break;
          case MonsWeb.MonKind.Drainer:
            tmpMonRender = "üêª";
            break;
          case MonsWeb.MonKind.Angel:
            tmpMonRender = "üòá";
            break;
          case MonsWeb.MonKind.Spirit:
            tmpMonRender = "üëª";
            break;
          case MonsWeb.MonKind.Mystic:
            tmpMonRender = "üßô";
            break;
        }

        const monMoveArrow = arrowForEvent(ev);
        s = tmpMonRender + monMoveArrow.arrow;
        moveDirection = monMoveArrow.isRight;
        break;
      case MonsWeb.EventModelKind.ManaMove:
        const manaMoveArrow = arrowForEvent(ev);
        s = "üíß" + manaMoveArrow.arrow;
        moveDirection = manaMoveArrow.isRight;
        break;
      case MonsWeb.EventModelKind.MysticAction:
        const mysticActionArrow = arrowForEvent(ev);
        s = "üßô‚ö°Ô∏è" + mysticActionArrow.arrow;
        moveDirection = mysticActionArrow.isRight;
        break;
      case MonsWeb.EventModelKind.DemonAction:
        const demonActionArrow = arrowForEvent(ev);
        moveDirection = demonActionArrow.isRight;
        s = "üòàüî•" + demonActionArrow.arrow;
        break;
      case MonsWeb.EventModelKind.SpiritTargetMove:
        const spiritMoveArrow = arrowForEvent(ev);
        s = "üëª" + spiritMoveArrow.arrow;
        moveDirection = spiritMoveArrow.isRight;
        break;
      case MonsWeb.EventModelKind.BombAttack:
        const bombAttackArrow = arrowForEvent(ev);
        s = "üí£" + bombAttackArrow.arrow;
        moveDirection = bombAttackArrow.isRight;
        break;
      case MonsWeb.EventModelKind.ManaScored:
        s = ev.mana && ev.mana.kind === MonsWeb.ManaKind.Supermana ? "üëë‚úÖ" : "üíß‚úÖ";
        break;
      case MonsWeb.EventModelKind.PickupBomb:
        s = "üí£";
        break;
      case MonsWeb.EventModelKind.PickupPotion:
        s = "üß™";
        break;
      case MonsWeb.EventModelKind.PickupMana:
        s = "üíß";
        break;
      case MonsWeb.EventModelKind.BombExplosion:
        s = "üí•";
        break;
      case MonsWeb.EventModelKind.GameOver:
        s = "üèÜ";
        break;
      case MonsWeb.EventModelKind.UsePotion:
        s = "üß™ü´ß";
        break;
      case MonsWeb.EventModelKind.NextTurn:
        s = "‚è≠Ô∏è";
        break;
      case MonsWeb.EventModelKind.MonFainted:
      case MonsWeb.EventModelKind.ManaDropped:
      case MonsWeb.EventModelKind.MonAwake:
      case MonsWeb.EventModelKind.Takeback:
      case MonsWeb.EventModelKind.SupermanaBackToBase:
      case MonsWeb.EventModelKind.DemonAdditionalStep:
        s = "";
        break;
      default:
        s = "";
    }
    if (s === "") continue;
    if (out !== "") out += " ";
    out += s;
  }

  if (moveDirection !== null) {
    if (moveDirection) {
      // TODO: actor before arrow
    } else {
      // TODO: actor after arrow
    }
  }

  // TODO: build output with actor / arrow / action / target

  return out === "" ? "‚Äî" : out;
}
